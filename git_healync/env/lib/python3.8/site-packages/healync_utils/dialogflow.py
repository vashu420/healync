# AUTHOR: LAWRENCE GANDHAR
# Date: 5th April 2022
#
# Dialog Flow Web Hooks

from dataclasses import dataclass

from . import settings as app_settings

@dataclass
class UserResponseOption:
    value: str
    display_name: str
    abbreviation: str

    def get_synonyms(self):
        return [self.abbreviation, self.display_name]

    def get_agent_message_text(self):
        return f"Type *{self.abbreviation.strip()}* for *{self.display_name.strip()}*"

    def get_session_entity_dic(self):
        dic = {
            "value": self.value,
            "synonyms": self.get_synonyms()
        }
        return dic

# =================================================
# GET SESSION ID
# =================================================
def get_session_id_from_dialogflow_request(dialogflow_request=None):
    if dialogflow_request:
        session_name = get_session_name_from_dialogflow_request(dialogflow_request)
        session_id = session_name.split("/")[-1]
        return session_id
    return None


# =================================================
# GET SESSION NAME
# =================================================
def get_session_name_from_dialogflow_request(dialogflow_request=None):
    if dialogflow_request:
        session_name = dialogflow_request.data['sessionInfo']['session']
        return session_name
    return None


# =================================================
# GET SESSION PARAMETERS
# If the parameter could not be extracted return None/Null
# =================================================
def get_session_parameter_from_dialogflow_request(dialogflow_request=None, parameter_name=None):
    if all([dialogflow_request, parameter_name]):
        try:
            parameter_value = dialogflow_request.data['sessionInfo']["parameters"][parameter_name]
            return parameter_value
        except:
            return None
    return None


# =================================================
# GET PARENT URL STRING
# =================================================
def get_parent_url_string(session_id=None):
    if session_id:
        if app_settings.DIALOGFLOW_ENVIRONMENT_ID:
            parent_url_string = f"projects/{app_settings.DIALOGFLOW_PROJECT_NAME}/locations/{app_settings.DIALOGFLOW_LOCATION_ID}/agents/{app_settings.DIALOGFLOW_AGENT_ID}/environments/{app_settings.DIALOGFLOW_ENVIRONMENT_ID}/sessions/{session_id}"
        else:
            parent_url_string = f"projects/{app_settings.DIALOGFLOW_PROJECT_NAME}/locations/{app_settings.DIALOGFLOW_LOCATION_ID}/agents/{app_settings.DIALOGFLOW_AGENT_ID}/sessions/{session_id}"
        return parent_url_string
    return None


# =================================================
# GET ENTITY TYPE
# =================================================
def get_entity_type_url_string(parent_url_string=None, entity_type_name=None):
    if all([entity_type_name, parent_url_string]):
        entity_type_id = app_settings.DIALOGFLOW_ENTITY_ID_MAP[entity_type_name]
        entity_type_url_string = f"{parent_url_string}/entityTypes/{entity_type_id}"
        return entity_type_url_string
    return None


# =================================================
# CREATE SESSION ENYTITY REQUEST
# =================================================
def build_dialogflow_create_session_entity_request_json(
        parent_url_string=None, 
        entity_type_url_string=None, 
        entity_override_mode=None, 
        entities=None
    ):
    
    if all([parent_url_string, entity_type_url_string, entities]):
        create_session_entity_request_json = {
            "parent": parent_url_string,
            "session_entity_type": {
                "name": entity_type_url_string,
                "entity_override_mode": entity_override_mode,
                "entities": [
                    entity.get_session_entity_dic() for entity in entities
                ]
            }
        }
        return create_session_entity_request_json
    return None

# =================================================
# GET FUFILLMENT WEBHOOK RESPONSE
# =================================================
def build_dialogflow_fulfillment_webhook_response_json(
        session_name=None, 
        response_text=None, 
        session_parameters_dictionary = None
    ):
    if not session_parameters_dictionary:
        session_parameters_dictionary = {}
    
    fulfillment_webhook_response_json = {
        "fulfillment_response":
        {
            "messages": [
                {
                    "text": {
                        "text": [
                            response_text
                        ]
                    }
                }
            ]
        },
        "session_info": {
            "session": session_name,
            "parameters": session_parameters_dictionary
        }
    }
    return fulfillment_webhook_response_json


# =================================================
# GET SESSION ENTITY REQUEST AND FULLFILLMENT
# =================================================
def get_session_entity_request_and_fulfillment_request_jsons(
        dialogflow_request=None,
        user_response_options=None,
        entity_type_name=None,
        entity_override_mode=None ,
        session_parameters_dictionary = None,
        prepend_text = None
    ):
    session_name = get_session_name_from_dialogflow_request(dialogflow_request)
    session_id = get_session_id_from_dialogflow_request(dialogflow_request)
    parent_url_string = get_parent_url_string(session_id)        
    entity_type_url_string = get_entity_type_url_string(parent_url_string, entity_type_name)

    create_session_entity_request = build_dialogflow_create_session_entity_request_json(
        parent_url_string, 
        entity_type_url_string,
        entity_override_mode,
        user_response_options
    )

    response_text = prepend_text if prepend_text is not None else ""
    for user_response_option in user_response_options:
        response_text += f"\n{user_response_option.get_agent_message_text()}"
        
    fulfillment_webhook_response = build_dialogflow_fulfillment_webhook_response_json(
        session_name, 
        response_text,
        session_parameters_dictionary
    )

    return create_session_entity_request, fulfillment_webhook_response  


# =================================================
# GET FAILURE RESPONSE
# =================================================
def get_dialogflow_failure_response(dialogflow_request=None, response_msg=None):
    session_name = get_session_name_from_dialogflow_request(dialogflow_request)
    dialogflow_response = build_dialogflow_fulfillment_webhook_response_json(session_name, response_msg)
    return dialogflow_response


